class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int>ump;
        for(int i=0;i<nums.size();i++)
        {
            ump[nums[i]]++;
        }

       for (auto& it : ump) {
        if(it.second==1)
            return it.first;
    }
        
        return -1;

    }
};


sol2 : by using bit manipulation

Take the input array : [2, 2, 2, 4, 4, 4, 5]

A B C
0 1 0 ~ 2
0 1 0
0 1 0
1 0 0 ~ 4
1 0 0
1 0 0
1 0 1 ~ 5

At bit position A : 3 occurences of '0' + 3 occurences of '1' + 1 occurence of '1'
At bit position B : 3 occurences of '1' + 3 occurences of '0' + 1 occurence of '0'
At bit position C : 6 occurences of '0' + 1 occurence of '1'

Therefore, at each bit position, we have bits that occur in multiples of 3, and one lone bit.
So, if we add up the bits at a given position as sum, and find the remainder when sum is divided by 3, we get the left over bit.

For the bits at A, sum = 4 : 4 % 3 = 1
For the bits at B, sum = 3 : 3 % 3 = 0
For the bits at C, sum = 1 : 1 % 3 = 1


class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
        long ans = 0;
        int n = nums.size();
        int x,t;
        int p = 0;
        for(int i=0;i<32;i++)
        {
            t=0;

            for(int j =0;j<n;j++)
            {

                x = nums[j]&1;
                t = t + x;
                nums[j] = nums[j] >> 1;


            }

            t = t%3;
            ans = ans + t * pow(2,p);
            p++;

        }
        return ans;

    }
};



